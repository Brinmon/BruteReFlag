# Copyright (C) 2012-2020 Intel Corporation.
# SPDX-License-Identifier: MIT
#

##############################################################
#
# 该文件包括所有测试目标以及所有非默认构建规则和测试配方。
#
##############################################################

###### 该目录特定的附加包含文件 ######

# 附加包含文件的占位符。

##############################################################
#
# 测试目标
#
##############################################################

###### 将所有通用定义放在这里 ######

# 这定义了运行同名工具的测试。这只是为了方便避免两次定义测试名称（一次在TOOL_ROOTS中，另一次在TEST_ROOTS中）。
# 这里定义的测试不应在TOOL_ROOTS和TEST_ROOTS中定义。
TEST_TOOL_ROOTS := instracebyaddrlog0

# 这定义了未在TEST_TOOL_ROOTS中定义的要运行的测试。
TEST_ROOTS :=

# 这定义了在测试期间将运行的工具，未在TEST_TOOL_ROOTS中定义。
TOOL_ROOTS :=

# 这定义了在测试期间将运行的静态分析工具。它们不应在TEST_TOOL_ROOTS中定义。如果存在同名测试，则应在TEST_ROOTS中定义。
# 注意：静态分析工具实际上是与Pin静态分析库链接的可执行文件。该库提供了一部分Pin API，允许工具执行应用程序或DLL的静态分析。运行此工具时，不使用Pin本身。
SA_TOOL_ROOTS :=

# 这定义了在测试期间将运行的所有应用程序。
APP_ROOTS :=

# 这定义了需要编译的任何附加目标文件。
OBJECT_ROOTS :=

# 这定义了需要编译的任何附加DLL（共享对象），除了pintools。
DLL_ROOTS :=

# 这定义了需要构建的任何静态库（存档）。
LIB_ROOTS :=

###### 将架构特定的定义放在这里 ######

# 如果适用于所有支持的操作系统，则将ia32特定的定义放在这里。
ifeq ($(TARGET),ia32)
    TEST_TOOL_ROOTS +=
    TEST_ROOTS +=
    TOOL_ROOTS +=
    SA_TOOL_ROOTS +=
    APP_ROOTS +=
    OBJECT_ROOTS +=
    DLL_ROOTS +=
    LIB_ROOTS +=
endif

# 如果适用于所有支持的操作系统，则将intel64特定的定义放在这里。
ifeq ($(TARGET),intel64)
    TEST_TOOL_ROOTS +=
    TEST_ROOTS +=
    TOOL_ROOTS +=
    SA_TOOL_ROOTS +=
    APP_ROOTS +=
    OBJECT_ROOTS +=
    DLL_ROOTS +=
    LIB_ROOTS +=
endif

###### 将操作系统特定的定义放在这里 ######

# Linux
ifeq ($(TARGET_OS),linux)
    TEST_TOOL_ROOTS +=
    TEST_ROOTS +=
    TOOL_ROOTS +=
    SA_TOOL_ROOTS +=
    APP_ROOTS +=
    OBJECT_ROOTS +=
    DLL_ROOTS +=
    LIB_ROOTS +=
    ifeq ($(TARGET),ia32)
        TEST_TOOL_ROOTS +=
        TEST_ROOTS +=
        TOOL_ROOTS +=
        SA_TOOL_ROOTS +=
        APP_ROOTS +=
        OBJECT_ROOTS +=
        DLL_ROOTS +=
        LIB_ROOTS +=
    endif
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS +=
        TEST_ROOTS +=
        TOOL_ROOTS +=
        SA_TOOL_ROOTS +=
        APP_ROOTS +=
        OBJECT_ROOTS +=
        DLL_ROOTS +=
        LIB_ROOTS +=
    endif
endif

# macOS*
ifeq ($(TARGET_OS),mac)
    TEST_TOOL_ROOTS +=
    TEST_ROOTS +=
    TOOL_ROOTS +=
    SA_TOOL_ROOTS +=
    APP_ROOTS +=
    OBJECT_ROOTS +=
    DLL_ROOTS +=
    LIB_ROOTS +=
    ifeq ($(TARGET),ia32)
        TEST_TOOL_ROOTS +=
        TEST_ROOTS +=
        TOOL_ROOTS +=
        SA_TOOL_ROOTS +=
        APP_ROOTS +=
        OBJECT_ROOTS +=
        DLL_ROOTS +=
        LIB_ROOTS +=
    endif
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS +=
        TEST_ROOTS +=
        TOOL_ROOTS +=
        SA_TOOL_ROOTS +=
        APP_ROOTS +=
        OBJECT_ROOTS +=
        DLL_ROOTS +=
        LIB_ROOTS +=
    endif
endif

# Windows
ifeq ($(TARGET_OS),windows)
    TEST_TOOL_ROOTS +=
    TEST_ROOTS +=
    TOOL_ROOTS +=
    SA_TOOL_ROOTS +=
    APP_ROOTS +=
    OBJECT_ROOTS +=
    DLL_ROOTS +=
    LIB_ROOTS +=
    ifeq ($(TARGET),ia32)
        TEST_TOOL_ROOTS +=
        TEST_ROOTS +=
        TOOL_ROOTS +=
        SA_TOOL_ROOTS +=
        APP_ROOTS +=
        OBJECT_ROOTS +=
        DLL_ROOTS +=
        LIB_ROOTS +=
    endif
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS +=
        TEST_ROOTS +=
        TOOL_ROOTS +=
        SA_TOOL_ROOTS +=
        APP_ROOTS +=
        OBJECT_ROOTS +=
        DLL_ROOTS +=
        LIB_ROOTS +=
    endif
endif

###### 在此处理异常（与操作系统/架构相关） ######

# 如果某些测试需要因为操作系统/架构上不支持的功能而被禁用，请在此处处理

# 这定义了应用任何错误相关过滤器之前的完整测试列表。
# 它用于生成有关过滤测试的报告。
RUNNABLE_TESTS := 

###### 在此处理异常（与错误相关） ######

# 如果某些测试需要因已知故障而被禁用，请在此处处理

###### 定义串行子集 ######

# 定义需要串行运行的测试，因为在并行运行时可能会导致问题
SERIAL_SUBSET := 

###### 定义稳定性子集 ######

# 这定义了应该在稳定性测试中运行的测试列表。它应包括TEST_TOOL_ROOTS和TEST_ROOTS中列出的所有测试，仅排除不稳定的测试。
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)

##############################################################
#
# 测试配方
#
##############################################################

###### 在此处完成稳定性测试 ######

# 本节包含除默认值以外的测试配方。
# 有关默认测试规则，请参阅makefile.default.rules。
# 本节中的所有测试应遵循命名约定：<testname>.test

##############################################################
#
# 构建规则
#
##############################################################

# 本节包含具有特殊构建规则的所有二进制文件的构建规则。
# 有关默认构建规则，请参阅makefile.default.rules。

###### 特殊工具的构建规则 ######

# 特殊工具构建规则的占位符

###### 特殊应用程序的构建规则 ######

# 特殊应用程序构建规则的占位符

###### 特殊对象的构建规则 ######

# 特殊对象构建规则的占位符

###### 特殊DLL的构建规则 ######

# 特殊DLL构建规则的占位符

###### 特殊库的构建规则 ######

# 特殊库构建规则的占位符
